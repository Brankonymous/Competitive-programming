//https://codeforces.com/contest/1110/problem/F
#include <bits/stdc++.h>

#define ios ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define for0(i, n) for (int i = 0; i < (int)(n); ++i)
#define for1(i, n) for (int i = 1; i <= (int)(n); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)
#define ll long long
#define mod 1000000007

using namespace std;

vector<pair<int,int>>v[500100];
int n,q,sz[500100],cnt[500100],br=0;
ll seg[2000100],lazy[2000100],ans[500100],dub[500100];
vector<pair<pair<int,int>,int>>t[500100];

void push(int ind,int x,int y){
    if (lazy[ind]){
        seg[ind]+=lazy[ind];
        if (x!=y){
            lazy[ind*2]+=lazy[ind];
            lazy[ind*2+1]+=lazy[ind];
        }
        lazy[ind]=0;
    }
}

void add(int x,int y,int l,int r,ll val,int ind){
    push(ind,x,y);
    if (x>r or y<l)return;
    if (x>=l and y<=r){
        seg[ind]+=val;
        if (x!=y){
            lazy[ind*2]+=val;
            lazy[ind*2+1]+=val;
        }
        return;
    }
    int mid=(x+y)/2;
    add(x,mid,l,r,val,ind*2);
    add(mid+1,y,l,r,val,ind*2+1);
    seg[ind]=min(seg[ind*2],seg[ind*2+1]);
}

int init_dfs(int s,int prev,ll sum){
    sz[s]=1;
    dub[s]=sum;
    br++;
    cnt[s]=br;
    sort(all(v[s]));
    for (auto i:v[s]){
        if (i.first==prev)continue;
        sz[s]+=init_dfs(i.first,s,dub[s]+(ll)i.second);
    }
    if (sz[s]==1)add(1,n,cnt[s],cnt[s],dub[s],1);
    return sz[s];
}

void build_seg(int l,int r,int ind){
    if (l==r){
        seg[ind]=dub[l];
        return;
    }
    int mid=(l+r)/2;
    build_seg(l,mid,ind*2);
    build_seg(mid+1,r,ind*2+1);
    seg[ind]=min(seg[ind*2],seg[ind*2+1]);
}

ll calc(int x,int y,int l,int r,int ind){
    push(ind,x,y);
    if (x>r or y<l)return 1e18;
    if (x>=l and y<=r)return seg[ind];
    int mid=(x+y)/2;
    return min(calc(x,mid,l,r,ind*2),calc(mid+1,y,l,r,ind*2+1));
}

void dfs(int s,int prev){
    for (auto i:t[s]){
        int j=i.second;
        int l=i.first.first,r=i.first.second;
        ans[j]=calc(1,n,l,r,1);
    }
    for (auto i:v[s]){

        if (i.first==prev)continue;

        ll w=(ll)i.second;
        add(1,n,1,n,w,1);
        add(1,n,cnt[i.first],cnt[i.first]+sz[i.first]-1,-(ll)2*w,1);
        dfs(i.first,s);
        add(1,n,cnt[i.first],cnt[i.first]+sz[i.first]-1,(ll)2*w,1);
        add(1,n,1,n,-w,1);
    }
}


int main(){
    ios;
    memset(lazy,0,sizeof(lazy));
    cin>>n>>q;
    for (int i=2;i<=n;i++){
        int p,w;
        cin>>p>>w;
        v[i].push_back({p,w});
        v[p].push_back({i,w});
    }
    for (int i=0;i<q;i++){
        int v,l,r;
        cin>>v>>l>>r;
        t[v].push_back({{l,r},i});
    }
    init_dfs(1,0,0LL);
    for (int i=1;i<=n;i++){
        if (sz[i]>1)dub[i]=1e18;
    }
    build_seg(1,n,1);

    dfs(1,0);
    for (int i=0;i<q;i++){
        cout<<ans[i]<<"\n";
    }
    return 0;
}
